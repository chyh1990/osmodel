// ----------------------------------------------------------------------
// This configuration file enables Bounded Model Checking.
// ----------------------------------------------------------------------

// the loop unrolling bound
cpa.loopstack.maxLoopIterations = 1

// use integer arithmetic
// (otherwise induction is normally too imprecise)
cpa.predicate.solver.useIntegers = true

// disable bounding assertions (default is enabled)
//bmc.boundingAssertions = false

// enable induction for safety verification
bmc.induction = true

// config file for invariant generation for induction
bmc.invariantGenerationConfigFile = config/invariantGeneration.properties

// generate invariants in parallel to the BMC analysis (default is false)
//bmc.parallelInvariantGeneration = true


// The rest of the options should not be changed.

// best traversal orer for formula creation
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

analysis.useBMC = true

// ARGCPA is needed for induction
cpa = cpa.arg.ARGCPA

// FunctionPointerCPA provides handling of function pointers
ARGCPA.cpa = cpa.functionpointer.FunctionPointerCPA

FunctionPointerCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.loopstack.LoopstackCPA

// this automaton defines which locations are the error locations
specification = config/specification/default.spc

// No caching, the formulas are never created twice
cpa.predicate.blk.useCache = false

// No abstractions
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = false

// No sat checks during formula creation
cpa.predicate.targetStateSatCheck = false

// Ignore target states during formula creation
cpa.automaton.breakOnTargetState = false
