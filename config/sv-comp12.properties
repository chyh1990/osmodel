# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured for abstractions at loop heads, similar to LBE but
# with function inlining.
# This configuration works best on most examples,
# but may have memory problems on really big programs.
# ----------------------------------------------------------------------

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for inlining to work well
analysis.traversal.order = bfs
analysis.traversal.useReversePostorder = true
analysis.traversal.useCallstack = true

analysis.useRefinement = true

cegar.refiner = cpa.predicate.PredicateRefiner

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA

# FunctionPointerCPA tracks function pointers and converts them to regular function calls
ARGCPA.cpa = cpa.functionpointer.FunctionPointerCPA

FunctionPointerCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.predicate.PredicateCPA

# this automaton defines which locations are the error locations
specification = config/specification/sv-comp.spc

# Use ABE with abstractions at loops
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

# Disable all output files except the error path
output.disable=true
cpa.arg.errorPath.file = ErrorPath.txt
